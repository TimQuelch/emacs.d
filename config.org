#+PROPERTY: header-args :results silent

* Lisp
** Load path
Add in my lisp directory as a load path
#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Custom
Set the custom file to another file. I don't want this to be the default of =init.el=
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

** Compiled
Load newer =.el= files even if =.elc= files exist
#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src

* Early GUI Configuration
This needs to be done near the start to prevent flashes of ugly GUI

** Hide extras
I don't really want the tool bars, menu bars, or system scroll-bars
#+begin_src emacs-lisp
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
#+end_src

** Transparency
Set up frame to be transparent
#+begin_src emacs-lisp
  (push '(alpha . 90) default-frame-alist)
#+end_src

** Fringes
Widen fringes
#+begin_src emacs-lisp
  (push '(left-fringe . 11) default-frame-alist)
  (push '(right-fringe . 11) default-frame-alist)
#+end_src

*** TODO Check if I really need the fringes

** Fonts
#+begin_src emacs-lisp
  (push '(font . "DejaVu Sans Mono") default-frame-alist)
  (set-face-font 'default "DejaVu Sans Mono")
  (set-face-font 'variable-pitch "DejaVu Sans")
  (copy-face 'default 'fixed-pitch)
#+end_src

* Personalisation
Setup name and email
#+begin_src emacs-lisp
  (setq user-full-name "Tim Quelch"
        user-mail-address "tim@quelch.name")
#+end_src

** TODO Read these from 'secrets' file

* Packages
I'm using =use-package=  to manage all my modules. It was initially loaded early in the =init.el= bootstrap, but I'll do more configuration of it here
#+begin_src emacs-lisp
  (setq use-package-always-defer t        ; Defer loading until package is required
        use-package-expand-minimally t    ; Expand macros as small as possible
        use-package-compute-statistics t ); Generate timing reports
#+end_src

Ensure that ~straight~ is used for all packages
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
#+end_src

Only clone the required commit. This will ensure that fresh installs are faster and take up less storage. This doesn't effect packages that are version locked by straight
#+begin_src emacs-lisp
  (setq straight-vc-git-default-clone-depth 1)
#+end_src
* UI
** Window configurations
Disable some unwanted UI elements
#+begin_src emacs-lisp
  (setq use-file-dialog nil                 ; Disable file dialog
        use-dialog-box nil                  ; Disable dialog box
        inhibit-startup-screen t            ; Diable startup screen
        inhibit-splash-screen t             ; Disable splash screen
        inhibit-startup-echo-area-message t ; Disable startup message
        initial-major-mode 'text-mode       ; Change scratch buffer to be text
        initial-scratch-message nil)        ; Remove scratch buffer message
#+end_src

Display dividers between split windows
#+begin_src emacs-lisp
  (setq window-divider-default-places t
        window-divider-default-bottom-width 4
        window-divider-default-right-width 4)
  (add-hook 'window-setup-hook #'window-divider-mode)
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :defines (doom-one-brighter-comments doom-one-comment-bg)
    :init
    (setq doom-one-brighter-comments t
          doom-one-comment-bg nil)
    (load-theme 'doom-one t))
#+end_src

Ensure that all the icons are installed. On new installs this will require ~(all-the-icons-install-fonts)~ to be run
#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

Configure the doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :init
    ;; prevent flash of unstyled modeline at startup
    (unless after-init-time
      (setq doom-modeline--old-format mode-line-format)
      (setq-default mode-line-format nil))

    (setq doom-modeline-major-mode-color-icon t
          doom-modeline-minor-modes nil
          doom-modeline-mu4e nil
          column-number-mode t
          doom-modeline-icon t))
#+end_src

** Buffers
Highlight the current line slightly darker
#+begin_src emacs-lisp
  (use-package hl-line
    :straight nil
    :hook (after-init . global-hl-line-mode))
#+end_src

Highlight the matching delimiter. This only happens in programming modes
#+begin_src emacs-lisp
  (use-package paren
    :straight nil
    :hook (prog-mode . show-paren-mode)
    :config (setq show-paren-delay 0
                  show-paren-when-point-inside-paren t
                  show-paren-when-point-in-periphery t))
#+end_src

Colour delimiters different colours depending on the level. This only happens in programming modes
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

Use variable pitch fonts for text modes (except when there is inline code)
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :hook (text-mode . mixed-pitch-mode))
#+end_src

Start scrolling in buffers before point leaves buffer
#+begin_src emacs-lisp
  (setq scroll-margin 10
        scroll-conservatively 100)
#+end_src

** Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :commands (hydra-default-pre
               hydra-keyboard-quit
               hydra--call-interactively-remap-maybe
               hydra-show-hint
               hydra-set-transient-map))

  (use-package pretty-hydra
    :demand)
#+end_src

** Window movement
#+begin_src emacs-lisp
  (use-package ace-window
    :preface
    (defun toggle-window-split ()
      (interactive)
      (if (= (count-windows) 2)
          (let* ((this-win-buffer (window-buffer))
                 (next-win-buffer (window-buffer (next-window)))
                 (this-win-edges (window-edges (selected-window)))
                 (next-win-edges (window-edges (next-window)))
                 (this-win-2nd (not (and (<= (car this-win-edges)
                                             (car next-win-edges))
                                         (<= (cadr this-win-edges)
                                             (cadr next-win-edges)))))
                 (splitter
                  (if (= (car this-win-edges)
                         (car (window-edges (next-window))))
                      'split-window-horizontally
                    'split-window-vertically)))
            (delete-other-windows)
            (let ((first-win (selected-window)))
              (funcall splitter)
              (if this-win-2nd (other-window 1))
              (set-window-buffer (selected-window) this-win-buffer)
              (set-window-buffer (next-window) next-win-buffer)
              (select-window first-win)
              (if this-win-2nd (other-window 1))))))
    :pretty-hydra
    ((:title "Window management"
             :foreign-keys warn :quit-key "q")
     ("Actions"
      (("TAB" other-window "switch")
       ("x" ace-delete-window "delete")
       ("m" ace-delete-other-windows "maximize")
       ("s" ace-swap-window "swap")
       ("a" ace-select-window "select")
       ("f" toggle-frame-fullscreen "fullscreen"))
      "Resize"
      (("h" shrink-window-horizontally "←")
       ("j" enlarge-window "↓")
       ("k" shrink-window "↑")
       ("l" enlarge-window-horizontally "→")
       ("n" balance-windows "balance"))
      "Split"
      (("b" split-window-right "horizontally")
       ("v" split-window-below "vertically")
       ("t" toggle-window-split "toggle"))
      "Zoom"
      (("+" text-scale-increase "in")
       ("=" text-scale-increase "in")
       ("-" text-scale-decrease "out")
       ("0" (text-scale-increase 0) "reset"))))
    :bind (([remap other-window] . ace-window)
           ("C-c w" . ace-window-hydra/body))
    :config (add-to-list 'aw-dispatch-alist '(?w ace-window-hydra/body) t))
#+end_src

** Navigation
Bind finding definition keys to something useful
#+begin_src emacs-lisp
  (bind-key "M-n" 'xref-find-definitions)
  (bind-key "M-m" 'xref-find-references)
#+end_src

Configure projectile
#+begin_src emacs-lisp
  (use-package projectile
    :hook (after-init . projectile-mode)
    :preface
    (defun my/projectile-or-compile (func)
      (setq-local compilation-read-command nil)
      (if (projectile-project-p)
          (call-interactively func)
        (call-interactively 'compile)))
    (defun my/configure-project ()
      (interactive)
      (my/projectile-or-compile 'projectile-configure-project))
    (defun my/compile-project ()
      (interactive)
      (my/projectile-or-compile 'projectile-compile-project))
    (defun my/test-project ()
      (interactive)
      (my/projectile-or-compile 'projectile-test-project))
    :bind (("<f4>" . my/configure-project)
           ("<f5>" . my/compile-project)
           ("<f6>" . my/test-project))
    :config
    (add-to-list 'projectile-globally-ignored-directories ".clangd")
    (projectile-register-project-type 'cmake '("CMakeLists.txt")
                                      :compilation-dir "build" ; This is the only thing different from default
                                      :configure "cmake %s"
                                      :compile "cmake --build ."
                                      :test "ctest"))
#+end_src

#+begin_src emacs-lisp
  (use-package helm
    :bind (
           ("C-c h" . helm-command-prefix)
           ("M-x" . helm-M-x)
           ("M-p" . helm-show-kill-ring)
           ("C-x C-b" . helm-buffers-list)
           ("C-x C-f" . helm-find-files)
           :map helm-map
           ("<tab>" . helm-execute-persistent-action)
           ("C-i" . helm-execute-persistent-action)
           ("C-z" . helm-select-action)
           ("C-j" . helm-next-line)
           ("C-k" . helm-previous-line)
           )
    :defines (helm-ff-search-library-in-sexp
              helm-ff-file-name-history-use-recentf
              helm-buffer-skip-remote-checking
              helm-mode-fuzzy-match
              helm-buffers-fuzzy-matching
              helm-org-headings-fontify
              helm-semantic-fuzzy-match
              helm-M-x-fuzzy-match
              helm-imenu-fuzzy-match
              helm-lisp-fuzzy-completion
              helm-locate-fuzzy-match)
    :config
    (require 'helm-config)
    (require 'helm-files)

    (setq helm-split-window-inside-p            t ; open helm buffer inside current window, not occupy whole other window
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-ff-file-name-history-use-recentf t
          helm-echo-input-in-header-line        t
          helm-scroll-amount                    4 ; scroll 4 lines other window using M-<next>/M-<prior>
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.

          helm-buffer-skip-remote-checking      t
          helm-mode-fuzzy-match                 t
          helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non-nil useful in helm-mini that lists buffers
          helm-org-headings-fontify             t
          ;; helm-find-files-sort-directories   t
          ;; ido-use-virtual-buffers            t
          helm-semantic-fuzzy-match             t
          helm-M-x-fuzzy-match                  t
          helm-imenu-fuzzy-match                t
          helm-lisp-fuzzy-completion            t
          ;; helm-apropos-fuzzy-match           t
          helm-locate-fuzzy-match               t
          helm-display-header-line              nil

          ;; you can customize helm-do-grep to execute ack-grep
          ;; helm-grep-default-command "ack-grep -Hn --smart-case --no-group --no-color %e %p %f"
          ;; helm-grep-default-recurse-command "ack-grep -H --smart-case --no-group --no-color %e %p %f"
          )

    (defun helm-hide-minibuffer-maybe ()
      "Hide minibuffer in Helm session if we use the header line as input field."
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))

    (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)

    (helm-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package helm-xref
    :after helm
    :demand)
#+end_src

#+begin_src emacs-lisp
  (use-package helm-projectile
    :bind ("C-x C-p" . helm-projectile))
#+end_src

** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :bind ("<f8>" . treemacs)
    :config
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)
    )

  (use-package treemacs-evil
    :after (treemacs evil)
    :demand)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :demand)

  (use-package treemacs-magit
    :after (treemacs magit)
    :demand)
#+end_src

** Evil
#+begin_src emacs-lisp
  (use-package evil
    :hook (after-init . evil-mode)
    :bind (
           :map evil-normal-state-map
           ([remap evil-next-line] . evil-next-visual-line)
           ([remap evil-previous-line] . evil-previous-visual-line)
           :map evil-motion-state-map
           ([remap evil-next-line] . evil-next-visual-line)
           ([remap evil-previous-line] . evil-previous-visual-line)
           ("C-S-D" . evil-scroll-up))
    :init
    (setq evil-cross-lines t)
    :config
    ;; Unbind record and use macro keys (I don't use them)
    (unbind-key "q" evil-normal-state-map)
    (unbind-key "@" evil-normal-state-map)

    ;; Unbind keys which don't really do anything useful
    ;; This lets them be used by other keymaps in
    (unbind-key "SPC" evil-motion-state-map)
    (unbind-key "TAB" evil-motion-state-map)
    (unbind-key "RET" evil-motion-state-map))
#+end_src

* Util functions
** Formatting functions
Indent the current buffer
#+begin_src emacs-lisp
  (defun indent-buffer ()
    "Indent entire buffer."
    (interactive)
    (save-excursion
      (delete-trailing-whitespace)
      (indent-region (point-min) (point-max) nil)))
  (bind-key "C-c f" 'indent-buffer)
#+end_src

Align trailing comments
#+begin_src emacs-lisp
  (defun align-trailing-comments (beginning end)
    "Align comments in region BEGINNING to END."
    (interactive "*r")
    (align-regexp beginning end (concat "\\(\\s-*\\)" (regexp-quote comment-start))))
#+end_src
** Buffer functions
#+begin_src emacs-lisp
  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

#+begin_src emacs-lisp
  (defun delete-this-file ()
    "Delete the current file, and kill the buffer."
    (interactive)
    (unless (buffer-file-name)
      (error "No file is currently being edited"))
    (when (yes-or-no-p (format "Really delete '%s'?"
                               (file-name-nondirectory buffer-file-name)))
      (delete-file (buffer-file-name))
      (kill-this-buffer)))
#+end_src

#+begin_src emacs-lisp
  (defun rename-this-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting a file!" name))
      (progn
        (when (file-exists-p filename)
          (rename-file filename new-name 1))
        (set-visited-file-name new-name)
        (rename-buffer new-name))))
#+end_src

** More useful help information
#+begin_src emacs-lisp
  (use-package helpful
    :bind (([remap describe-key] . helpful-key)
           ([remap describe-symbol] . helpful-symbol)
           ([remap describe-function] . helpful-callable)
           ([remap describe-variable] . helpful-variable)
           ("C-c C-d" . helpful-at-point))
    :commands helpful--buffer)
#+end_src

** Configuration functions
Edit this configuration file
#+begin_src emacs-lisp
  (defun my/edit-config-file ()
    "Open the config.org file"
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))
  (bind-key "C-c e" 'my/edit-config-file)
#+end_src

Reload the configuration file (not init.el, but just this config.org)
#+begin_src emacs-lisp
  (defun my/reload-config-file ()
    "Reload the config.org file"
    (interactive)
    (org-babel-load-file (expand-file-name "config.org" user-emacs-directory)))
  (bind-key "C-c r" 'my/reload-config-file)
#+end_src

* Editing
#+begin_src emacs-lisp
  ;; Set backup file location
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq delete-old-versions t)
  (setq kept-new-versions 6)
  (setq kept-old-versions 2)
  (setq version-control t)
#+end_src

#+begin_src emacs-lisp
  ;; Disable autosaves
  (setq auto-save-default nil)
#+end_src

#+begin_src emacs-lisp
  ;; Set default tab width
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (defvaralias 'c-basic-offset 'tab-width)
#+end_src

#+begin_src emacs-lisp
  ;; Prefer using UTF-8
  (prefer-coding-system 'utf-8)
#+end_src

#+begin_src emacs-lisp
  ;; Set default fill column width
  (setq-default fill-column 100)
#+end_src

#+begin_src emacs-lisp
  ;; Auto reload files modified by external program
  (use-package autorevert
    :straight nil
    :hook (after-init . global-auto-revert-mode))
#+end_src

#+begin_src emacs-lisp
  ;; Better comment dwim
  (use-package comment-dwim-2
    :bind ([remap comment-dwim] . comment-dwim-2)
    :config (setq cd2/region-command 'cd2/comment-or-uncomment-region))
#+end_src

#+begin_src emacs-lisp
  ;; Autocomplete parens
  (use-package elec-pair
    :straight nil
    :hook (after-init . electric-pair-mode))
#+end_src

#+begin_src emacs-lisp
  ;; Adding in parenthesis and other brackets from visual mode
  (use-package evil-surround
    :hook (after-init . global-evil-surround-mode))
#+end_src

#+begin_src emacs-lisp
  ;; Subword splitting
  (use-package subword
    :straight nil
    :hook ((prog-mode . subword-mode)
           (minibuffer-setup . subword-mode)))
#+end_src

#+begin_src emacs-lisp
  ;; Flycheck
  (use-package flycheck
    :hook (prog-mode . global-flycheck-mode)
    :config
    (setq flycheck-emacs-lisp-load-path 'inherit)
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+end_src

#+begin_src emacs-lisp
  (use-package flycheck-posframe
    :after flycheck
    :hook (flycheck-mode . flycheck-posframe-mode)
    :config
    (setq flycheck-posframe-border-width 3)
    (add-to-list 'flycheck-posframe-inhibit-functions
                 #'(lambda () (bound-and-true-p company-backend))))
#+end_src

#+begin_src emacs-lisp
  ;; Flyspell
  (use-package flyspell
    :straight nil
    :hook ((text-mode outline-mode) . flyspell-mode))
#+end_src

#+begin_src emacs-lisp
  ;; Compilation
  (use-package compile
    :straight nil
    :commands compile
    :config
    (setq compilation-scroll-output 'first-error))
#+end_src

* Git
I'm using magit for interacting with git repos
#+begin_src emacs-lisp :noweb yes
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config
    <<magit-config>>)
#+end_src

I'm configuring the face of the current branch so that it is surrounded by a box and more visible (This used to be done by default and this was the fix. It may have been updated upstream again)
#+begin_src emacs-lisp :tangle no :noweb-ref magit-config
  (set-face-attribute 'magit-branch-current nil :box t)
#+end_src

Use evil keybindings in magit
#+begin_src emacs-lisp
  (use-package evil-magit
    :after magit
    :demand)
#+end_src

Highlight  changed lines in fringes
#+begin_src emacs-lisp
  (use-package diff-hl
    :after magit
    :demand
    :hook ((after-init . global-diff-hl-mode)
           (magit-post-refresh-hook . diff-h-magit-post-refresh))
    :config
    (diff-hl-flydiff-mode 1)
    (setq-default fringes-outside-margins t))
#+end_src

Also include some small major modes for editing git specific files
#+begin_src emacs-lisp
  (use-package gitignore-mode)
  (use-package gitattributes-mode)
  (use-package gitconfig-mode)
#+end_src

* Org mode
** Base
#+begin_src emacs-lisp :noweb yes
  (use-package org
    :straight org-plus-contrib
    :bind (
           <<org-bindings>>
           )
    :config
    <<org-config>>
    )
#+end_src

*** Bindings
:PROPERTIES:
:header-args: :noweb-ref org-bindings :tangle no
:END:

Global binding to store a link that can be pasted into org mode
#+begin_src emacs-lisp
  ("C-c l" . org-store-link)
#+end_src

Rebinding all the direction keys to use evil-like keys
#+begin_src emacs-lisp
  :map org-mode-map
  ("M-j" . org-metadown)
  ("M-k" . org-metaup)
  ("M-h" . org-metaleft)
  ("M-l" . org-metaright)
  ("S-J" . org-shiftdown)
  ("S-K" . org-shiftup)
  ("S-H" . org-shiftleft)
  ("S-L" . org-shiftright)
  ("M-S-J" . org-shiftmetadown)
  ("M-S-K" . org-shiftmetaup)
  ("M-S-H" . org-shiftmetaleft)
  ("M-S-L" . org-shiftmetaright)
  ("C-S-J" . org-shiftcontroldown)
  ("C-S-K" . org-shiftcontrolup)
  ("C-S-H" . org-shiftcontrolleft)
  ("C-S-L" . org-shiftcontrolright)
#+end_src

Additionally change the movement keys in the date-picker to have evil-like movement
#+begin_src emacs-lisp
  :map org-read-date-minibuffer-local-map
  ("M-j" . (lambda ()
             (interactive) (org-eval-in-calendar '(calendar-forward-week 1))))
  ("M-k" . (lambda ()
             (interactive) (org-eval-in-calendar '(calendar-backward-week 1))))
  ("M-h" . (lambda ()
             (interactive) (org-eval-in-calendar '(calendar-backward-day 1))))
  ("M-l" . (lambda ()
             (interactive) (org-eval-in-calendar '(calendar-forward-day 1))))
#+end_src

Unbind keys that add/remove files from agenda. I instead just use all the files in the org directory.
#+begin_src emacs-lisp :noweb-ref org-config
  ;; Unbind org add file and remove file
  (unbind-key "C-c [" org-mode-map)
  (unbind-key "C-c ]" org-mode-map)
#+end_src

*** Configuration
:PROPERTIES:
:header-args: :noweb-ref org-config :tangle no
:END:

Setting the org directory based on the user's home directory (this might not be portable?)
#+begin_src emacs-lisp
  (setq org-directory (expand-file-name "documents/org" (getenv "HOME")))
#+end_src

Setting up ~TODO~ states. ~WAITING~ and ~CANCELLED~ require messages when entering these states. I'm trying not to use the ~EMAIL~ state, but keeping it here for archive purposes.
#+begin_src emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w@/!)" "|" "DONE(d)")
                            (sequence "EMAIL(e)" "|" "SENT(s)")
                            (sequence "|" "CANCELLED(c@/!)")))
#+end_src

Stop accidental editing of folded content. TBH not exactly sure what the smart option does but it seems like the best /shrug/
#+begin_src emacs-lisp
  (setq org-catch-invisible-edits 'smart)
#+end_src

Ensure that sub-tasks must be completed before the parent task can be marked done
#+begin_src emacs-lisp
  (setq org-enforce-todo-dependencies t)
#+end_src

Log the time when tasks are completed
#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src

Log changed tasks into the ~LOGBOOK~ drawer
#+begin_src emacs-lisp
  (setq org-log-into-drawer t)
#+end_src

Setup refile targets. Targets include the current file and all agenda files (files in the org directory) up to 9 levels deep in the hierarchy. Only in-progress tasks are allowed as refile targets
#+begin_src emacs-lisp
  (defun my/verify-refile-target()
    "Exclude done todo states from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)))
  (setq org-refile-target-verify-function 'my/verify-refile-target)
#+end_src

Use the outline path as the refile target. This can be completed in steps to work well with helm etc.
#+begin_src emacs-lisp
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
#+end_src

Keep tags appearing right after the headline. Flushing right (e.g. -80) would be preferable, but does not work well with variable pitch fonts
#+begin_src emacs-lisp
  (setq org-tags-column 0)
#+end_src

Don't log when changing state with shift-arrows
#+begin_src emacs-lisp
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

Pressing return over links will follow the link
#+begin_src emacs-lisp
  (setq org-return-follows-link t)
#+end_src

Open most things in emacs, html in browsers(?) and PDFs in evince (not portable I guess)
#+begin_src emacs-lisp
  (setq org-file-apps '((auto-mode . emacs)
                        ("\\.x?html?\\'" . default)
                        ("\\.pdf\\'" . "evince %s")))
#+end_src

Use visual line mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

Set up autosaves so that org files are always saved when changed
#+begin_src emacs-lisp
  (add-hook 'org-capture-after-finalize-hook 'org-save-all-org-buffers)
  (add-hook 'org-after-refile-insert-hook 'org-save-all-org-buffers)
  (advice-add 'org-agenda-quit :before 'org-save-all-org-buffers)
#+end_src

Highlight \LaTeX entities
#+begin_src emacs-lisp
  (setq org-highlight-latex-and-related '(native script entities))
#+end_src

Use \LaTeX to preview maths
#+begin_src emacs-lisp
  ;; Setup latex equation preview
  (setq org-preview-latex-default-process 'dvisvgm
        org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+end_src

** Agenda
#+begin_src emacs-lisp
  (use-package org-agenda
    :straight nil
    :bind (("C-c a" . org-agenda)
           ("<f12>" . org-agenda)
           :map org-agenda-mode-map
           ("j" . org-agenda-next-line)
           ("k" . org-agenda-previous-line)
           ("J" . org-agenda-next-item)
           ("K" . org-agenda-previousitem)
           ("C-d" . scroll-up-command)
           ("C-S-D" . scroll-down-command))
    :init
    (setq org-agenda-files (list org-directory))
    :config
    (setq org-agenda-dim-blocked-tasks t
          org-agenda-follow-indirect t
          org-agenda-span 'week
          org-agenda-window-setup 'only-window
          org-agenda-restore-windows-after-quit t)

    (setq org-agenda-custom-commands
          '(("j" "Agenda"
             ((agenda ""
                      ((org-agenda-span 1)))
              (tags "REFILE"
                    ((org-agenda-overriding-header "Tasks to Refile")
                     (orgs-tag-match-list-sublevels nil)))
              (tags-todo "-EMACS"
                         ((org-agenda-overriding-header "Unscheduled Tasks")
                          (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))))
              (tags-todo "EMACS"
                         ((org-agenda-overriding-header "Emacs configuration")))
              ))))

    (unbind-key ":" org-agenda-mode-map))
#+end_src

** Archiving
#+begin_src emacs-lisp
  (use-package org-archive
    :straight nil
    :init
    (defvar archive-directory (expand-file-name "archive" org-directory))
    :config
    (setq org-archive-location (concat (file-name-as-directory archive-directory) "%s_archive::datetree/")))
#+end_src

** Capture
#+begin_src emacs-lisp
  (use-package org-capture
    :straight nil
    :bind ("C-c c" . org-capture)
    :config
    (setq org-default-notes-file (expand-file-name "refile.org" org-directory)
          org-capture-bookmark nil)

    (setq org-capture-templates
          '(("t" "todo" entry (file org-default-notes-file)
             "* TODO %?\n%U\n" :clock-in t :clock-resume t)
            ("n" "note" entry (file org-default-notes-file)
             "* %?\n%U\n" :clock-in t :clock-resume t)
            ("e" "email" entry (file org-default-notes-file)
             "* EMAIL %?\n%U\n" :clock-in t :clock-resume t)
            ("r" "reply" entry (file org-default-notes-file)
             "* EMAIL Reply to %?\n%U\n" :clock-in t :clock-resume t))))
#+end_src

** Clocking
#+begin_src emacs-lisp
  (use-package org-clock
    :straight nil
    :bind (("<f11>" . org-clock-goto)
           ("C-<f11>" . org-clock-in))
    :init
    (org-clock-persistence-insinuate)
    :config
    (setq org-clock-in-resume t
          org-clock-into-drawer t
          org-clock-out-remove-zero-time-clocks t
          org-clock-out-when-done t
          org-clock-persist t))
#+end_src

** Appearance
#+begin_src emacs-lisp
  (use-package org-indent
    :init (setq org-startup-indented t)
    :straight nil
    :config
    (set-face-attribute 'org-hide nil :inherit '(fixed-pitch))
    (set-face-attribute 'org-indent nil :inherit '(org-hide)))
#+end_src

** Habits
#+begin_src emacs-lisp
  (use-package org-habit
    :straight nil
    :init
    (add-to-list 'org-modules 'org-habit)
    :config
    (setq org-habit-graph-column 65))
#+end_src

** Referencing
#+begin_src emacs-lisp
  (defvar default-bibliography (expand-file-name "documents/library.bib" (getenv "HOME")))

  (use-package org-ref
    :after org
    :demand
    :init
    (setq org-ref-default-bibliography (list default-bibliography)
          org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
          org-ref-default-citation-link "autocite"))
#+end_src

#+begin_src emacs-lisp
  (use-package helm-bibtex
    :config
    (setq bibtex-completion-pdf-field "file"
          bibtex-completion-pdf-open-function 'helm-open-file-externally
          helm-bibtex-full-frame nil))
#+end_src
** Exporting
#+begin_src emacs-lisp
  (use-package ox-extra
    :straight nil
    :after org
    :demand
    :config
    (ox-extras-activate '(ignore-headlines)))
#+end_src

#+begin_src emacs-lisp
  (use-package ox-latex
    :straight nil
    :config
    (add-to-list 'org-latex-classes '("a4article"
                                      "\\documentclass[11pt,a4paper]{article}"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (setq org-latex-default-class "a4article")
    (setq org-latex-packages-alist '(("titletoc, title" "appendix" nil) ; Setup appendices
                                     ("margin=25mm" "geometry")         ; Setup margins
                                     ("" "tocbibind" nil)               ; Put bibliography in TOC
                                     ("" "pdflscape" nil)               ; Allow landscape pages
                                     ("" "pdfpages" nil)                ; Allow inclusion of pdfs
                                     ("" "subcaption" nil)              ; Allow subcaptions
                                     ("" "listings" nil)                ; Source code listings
                                     ("" "color" nil)))                 ; Color in source code listings

    (setq org-latex-default-packages-alist (remove '("" "hyperref" nil) org-latex-default-packages-alist))
    (add-to-list 'org-latex-default-packages-alist '("hidelinks" "hyperref" nil))

    (setq org-latex-listings t)                                         ; Turn on source code inclusion
    (setq org-latex-listings-options '(("basicstyle" "\\linespread{0.85}\\ttfamily")
                                       ("numbers" "left")
                                       ("numberstyle" "\\tiny")
                                       ("frame" "tb")
                                       ("tabsize" "4")
                                       ("columns" "fixed")
                                       ("showstringspaces" "false")
                                       ("showtabs" "false")
                                       ("keepspaces" "true")
                                       ("commentstyle" "\\color{red}")
                                       ("keywordstyle" "\\color{blue}")
                                       ("breaklines" "true")))

    (setq org-latex-pdf-process '("latexmk -shell-escape -bibtex -pdf %f")))
#+end_src

** Roam

#+begin_src emacs-lisp
  (use-package org-roam
    :straight (:host github :repo "jethrokuan/org-roam")
    :hook (after-init . org-roam-mode)
    :init
    (setq org-roam-directory (expand-file-name "notes" org-directory)))
#+end_src

* LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :defines lsp-clients-clangd-args
    :commands (lsp lsp-deferred)
    :hook ((c-mode
            c++-mode
            python-mode
            dockerfile-mode
            java-mode) . lsp)
    :config
    (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error")
          lsp-prefer-flymake nil
          lsp-enable-snippet nil))

  (use-package lsp-java)

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :bind (
           :map lsp-ui-mode-map
           ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
           ([remap xref-find-references] . lsp-ui-peek-find-references)
           :map lsp-ui-peek-mode-map
           ("M-j" . lsp-ui-peek--select-next-file)
           ("M-k" . lsp-ui-peek--select-prev-file)
           ("C-j" . lsp-ui-peek--select-next)
           ("C-k" . lsp-ui-peek--select-prev)
           ("j" . lsp-ui-peek--select-next)
           ("k" . lsp-ui-peek--select-prev)
           )
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-use-childframe t
          lsp-ui-doc-position 'top
          lsp-ui-doc-include-signature t
          lsp-ui-sideline-enable nil
          lsp-ui-flycheck-enable t
          lsp-ui-flycheck-list-position 'right
          lsp-ui-flycheck-live-reporting t
          lsp-ui-peek-enable t
          lsp-ui-peek-always-show t
          lsp-ui-peek-list-width 60
          lsp-ui-peek-peek-height 25))

  (use-package company-lsp
    :after (company lsp-mode)
    :demand
    :hook (lsp-mode . (my/add-company-backend-locally 'company-lsp))
    :config
    (setq company-lsp-async t
          company-lsp-cache-candidates nil
          company-lsp-enable-recompletion t))

  (use-package dap-mode
    :commands dap-mode
    :hook lsp-mode)

  (use-package dap-ui
    :straight nil
    :after dap-mode
    :demand
    :config
    (dap-ui-mode t)
    (dap-tooltip-mode t)
    (tooltip-mode t))

  (use-package dap-lldb
    :straight nil
    :after dap-mode
    :demand
    :config
    (setq dap-lldb-debug-program (list (executable-find "lldb-vscode"))))

  (use-package dap-python
    :straight nil
    :after dap-mode
    :demand)
#+end_src

* Company
#+begin_src emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :bind (("C-<tab>" . company-complete)
           ("<backtab>" . company-yasnippet)
           :map company-active-map
           ("C-j" . company-select-next-or-abort)
           ("C-k" . company-select-previous-or-abort)
           ("C-<tab>" . company-complete-selection)
           ("<tab>" . company-complete-common-or-cycle)
           ("<backtab>" . abort-and-company-yasnippet))
    :preface
    (defun abort-and-company-yasnippet ()
      (interactive)
      (company-abort)
      (call-interactively 'company-yasnippet))
    :config
    (defmacro my/add-company-backend-locally (backend)
      (lambda () (add-to-list (make-local-variable 'company-backends) backend)))
    (setq company-idle-delay 0.2
          company-minimum-prefix-length 1
          company-selection-wrap-around t))

  (use-package company-box
    :diminish
    :functions (my-company-box--make-line
                my-company-box-icons--elisp)
    :commands (company-box--get-color
               company-box--resolve-colors
               company-box--add-icon
               company-box--apply-color
               company-box--make-line
               company-box-icons--elisp)
    :hook (company-mode . company-box-mode)
    :init (setq company-box-backends-colors nil
                company-box-show-single-candidate t
                company-box-max-candidates 50
                company-box-doc-delay 0.2)
    :config
    ;; Support `company-common'
    (defun my-company-box--make-line (candidate)
      (-let* (((candidate annotation len-c len-a backend) candidate)
              (color (company-box--get-color backend))
              ((c-color a-color i-color s-color) (company-box--resolve-colors color))
              (icon-string (and company-box--with-icons-p (company-box--add-icon candidate)))
              (candidate-string (concat (propertize (or company-common "") 'face 'company-tooltip-common)
                                        (substring (propertize candidate 'face 'company-box-candidate) (length company-common) nil)))
              (align-string (when annotation
                              (concat " " (and company-tooltip-align-annotations
                                               (propertize " " 'display `(space :align-to (- right-fringe ,(or len-a 0) 1)))))))
              (space company-box--space)
              (icon-p company-box-enable-icon)
              (annotation-string (and annotation (propertize annotation 'face 'company-box-annotation)))
              (line (concat (unless (or (and (= space 2) icon-p) (= space 0))
                              (propertize " " 'display `(space :width ,(if (or (= space 1) (not icon-p)) 1 0.75))))
                            (company-box--apply-color icon-string i-color)
                            (company-box--apply-color candidate-string c-color)
                            align-string
                            (company-box--apply-color annotation-string a-color)))
              (len (length line)))
        (add-text-properties 0 len (list 'company-box--len (+ len-c len-a)
                                         'company-box--color s-color)
                             line)
        line))
    (advice-add #'company-box--make-line :override #'my-company-box--make-line)

    ;; Prettify icons
    (defun my-company-box-icons--elisp (candidate)
      (when (derived-mode-p 'emacs-lisp-mode)
        (let ((sym (intern candidate)))
          (cond ((fboundp sym) 'Function)
                ((featurep sym) 'Module)
                ((facep sym) 'Color)
                ((boundp sym) 'Variable)
                ((symbolp sym) 'Text)
                (t . nil)))))
    (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp)

    (declare-function all-the-icons-faicon 'all-the-icons)
    (declare-function all-the-icons-material 'all-the-icons)
    (declare-function all-the-icons-octicon 'all-the-icons)
    (setq company-box-icons-all-the-icons
          `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.9 :v-adjust -0.2))
            (Text . ,(all-the-icons-faicon "text-width" :height 0.85 :v-adjust -0.05))
            (Method . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Function . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Constructor . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Field . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (Variable . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (Class . ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Interface . ,(all-the-icons-material "share" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Module . ,(all-the-icons-material "view_module" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Property . ,(all-the-icons-faicon "wrench" :height 0.85 :v-adjust -0.05))
            (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.9 :v-adjust -0.2))
            (Value . ,(all-the-icons-material "format_align_right" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Enum . ,(all-the-icons-material "storage" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.9 :v-adjust -0.2))
            (Snippet . ,(all-the-icons-material "format_align_center" :height 0.9 :v-adjust -0.2))
            (Color . ,(all-the-icons-material "palette" :height 0.9 :v-adjust -0.2))
            (File . ,(all-the-icons-faicon "file-o" :height 0.9 :v-adjust -0.05))
            (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.9 :v-adjust -0.2))
            (Folder . ,(all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05))
            (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Constant . ,(all-the-icons-faicon "square-o" :height 0.9 :v-adjust -0.05))
            (Struct . ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Event . ,(all-the-icons-faicon "bolt" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-orange))
            (Operator . ,(all-the-icons-material "control_point" :height 0.9 :v-adjust -0.2))
            (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.85 :v-adjust -0.05))
            (Template . ,(all-the-icons-material "format_align_center" :height 0.9 :v-adjust -0.2)))
          company-box-icons-alist 'company-box-icons-all-the-icons))
#+end_src

* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :hook (after-init . yas-global-mode))

  (use-package yasnippet-snippets)
#+end_src

* Languages
** C and C++
#+begin_src emacs-lisp
  ;; C and C++
  (use-package cc-mode
    :straight nil
    :mode ("\\.h\\'" . c++-mode)
    :hook (c-mode . (lambda () (c-toggle-comment-style -1))))
#+end_src

#+begin_src emacs-lisp
  (use-package company-c-headers
    :after (company cc-mode)
    :demand
    :hook ((c-mode c++-mode) . (my/add-company-backend-locally 'company-c-headers)))
#+end_src

#+begin_src emacs-lisp
  (use-package modern-cpp-font-lock
    :hook (c++-mode . modern-c++-font-lock-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package clang-format
    :after cc-mode
    :commands (clang-format-buffer clang-format-region clang-format)
    :bind (:map c-mode-base-map ("C-c C-f" . clang-format-buffer)))
#+end_src

** OpenCL
#+begin_src emacs-lisp
  ;; OpenCL
  (use-package opencl-mode
    :mode "\\.cl\\'")
#+end_src

** CMake
#+begin_src emacs-lisp
  ;; CMake
  (use-package cmake-mode
    :commands cmake-mode
    :config
    (setq cmake-tab-width tab-width))
#+end_src

#+begin_src emacs-lisp
  (use-package cmake-font-lock
    :hook (cmake-mode . cmake-font-lock-activate))
#+end_src

#+begin_src emacs-lisp
  (use-package company-cmake              ; Included in company
    :straight nil
    :after (company cmake-mode)
    :hook (cmake-mode . (my/add-company-backend-locally 'company-cmake)))
#+end_src

** Python
#+begin_src emacs-lisp
  ;; Python
  (use-package elpy
    :hook (elpy-mode . (my/add-company-backend-locally 'elpy-company-backend))
    :init                                 ;
    (remove-hook 'elpy-modules 'elpy-module-company)
    (advice-add 'python-mode :before 'elpy-enable))
#+end_src

** Matlab
#+begin_src emacs-lisp
  ;; Matlab
  (use-package matlab
    :straight matlab-mode
    :defines (matlab-fill-code matlab-shell-command-switches matlab-indent-level matlab-cont-level)
    :commands (matlab-mode matlab-shell)
    :config
    (setq matlab-fill-code nil
          matlab-indent-level tab-width
          matlab-cont-level tab-width
          matlab-shell-command-switches '("-nodesktop" "-nosplash")))
#+end_src

#+begin_src emacs-lisp
  (use-package company-matlab-shell
    :straight nil
    :after (company matlab)
    :demand
    :hook (matlab-shell-mode . (my/add-company-backend-locally 'company-matlab-shell)))
#+end_src

** Dockerfile
#+begin_src emacs-lisp
  ;; Dockerfile
  (use-package dockerfile-mode
    :config
    (setq dockerfile-use-sudo t))
#+end_src

** Systemd files
#+begin_src emacs-lisp
  ;; Systemd
  (use-package systemd)
#+end_src

** Latex
#+begin_src emacs-lisp
  (use-package latex
    :straight auctex
    :mode ("\\.tex\\'" . LaTeX-mode)
    :config
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (setq-default TeX-master nil
                  TeX-PDF-mode t
                  LaTeX-indent-level tab-width
                  TeX-brace-indent-level tab-width
                  LaTeX-item-indent -2)
    (setq TeX-parse-self t))

  (use-package reftex
    :straight nil
    :after latex
    :demand
    :defines (default-bibliography)
    :config
    (setq reftex-plug-into-AUCTeX t
          reftex-default-bibliography (list default-bibliography)))

  (use-package bibtex
    :straight nil
    :config
    (setq bibtex-dialect 'biblatex))

  (use-package company-auctex
    :functions company-auctex-init
    :after (company latex)
    :demand
    :hook ((plain-TeX-mode
            LaTeX-mode
            ams-tex-mode
            ConTeXt-mode
            Texinfo-mode
            docTeX-mode) .
            (lambda ()
              (make-local-variable 'company-backends)
              (company-auctex-init))))
#+end_src

* Shell
#+begin_src emacs-lisp
  (defvar default-shell (getenv "SHELL"))
  (setq-default shell-file-name (executable-find default-shell))
  (setq-default explicit-shell-file-name (executable-find default-shell))

  (use-package vterm
    :if (and (executable-find "cmake")
             (executable-find "libtool")
             (executable-find "make")))

  (use-package xterm-color
    :defines (compilation-environment
              eshell-preoutput-filter-functions
              eshell-output-filter-functions)
    :functions (compilation-filter)
    :init
    ;; Setup color in shell
    (setenv "TERM" "xterm-256color")
    (setq comint-output-filter-functions
          (remove 'ansi-color-process-output comint-output-filter-functions))
    (add-hook 'shell-mode-hook
              (lambda ()
                ;; Disable font-locking in this buffer to improve performance
                (font-lock-mode -1)
                ;; Prevent font-locking from being re-enabled in this buffer
                (make-local-variable 'font-lock-function)
                (setq font-lock-function (lambda (_) nil))
                (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))

    ;; Setup color in eshell
    (with-eval-after-load 'esh-mode
      (add-hook 'eshell-before-prompt-hook
                (lambda ()
                  (setq xterm-color-preserve-properties t)))
      (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
      (setq eshell-output-filter-functions
            (remove 'eshell-handle-ansi-color eshell-output-filter-functions)))

    ;; Setup color in compilation buffers
    (setq compilation-environment '("TERM=xterm-256color"))
    (defun my-advice-compilation-filter (f proc string)
      (funcall f proc (xterm-color-filter string)))
    (advice-add 'compilation-filter :around #'my-advice-compilation-filter))

  (defun open-shell ()
    "Call the best shell for the current system."
    (interactive)
    (cond ((eq system-type 'windows-nt) (eshell))
          ((fboundp 'vterm) (vterm))
          (t (ansi-term default-shell))))
  (bind-key "C-c C-t" 'open-shell)
#+end_src
