#+property: header-args :exports code :results silent :tangle config.el :noweb no-export

* Preface

#+include: README.org

** On the "Literateness" of this document
This document tangles to multiple files, namely =config.el=, =packages.el=, and =init.el=, and it frequently uses noweb to insert code blocks into other code blocks. When exported these details aren't visible. This means that the exported version should not be used as the sole source of truth, and you will need to reference the actual =config.org= document for full picture.

* Doom modules
:PROPERTIES:
:header-args: :tangle no :results silent :noweb-ref doom-modules
:END:

All my doom modules appear in the following sections
#+begin_src emacs-lisp :tangle init.el :noweb no-export :noweb-ref no
(doom!
 <<doom-modules>>
 )
#+end_src

** Completion
I'm using company as my inline completion framework, and helm as my navigation/completion/UI completion framework
#+begin_src emacs-lisp
:completion
(company +childframe)
(ivy +prescient +icons)
#+end_src

** UI
:PROPERTIES:
:CUSTOM_ID: doom-ui
:END:

I enable various UI improvements and such here
#+begin_src emacs-lisp
:ui
doom
modeline
nav-flash
ophints
(popup +defaults)
(treemacs +lsp)
vc-gutter
window-select
#+end_src

** Editor
I use evil keybindings everywhere. I also want to enable snippets and code formatting
#+begin_src emacs-lisp
:editor
(evil +everywhere)
format
fold
#+end_src

** Emacs
Improve ~dired~, version-control, and parenthesis behaviour
#+begin_src emacs-lisp
:emacs
(dired +icons)
electric
vc
undo
#+end_src

** Terminal
~vterm~ is the best term
#+begin_src emacs-lisp
:term
vterm
#+end_src

** Checkers
Enable syntax and spell checkers
#+begin_src emacs-lisp
:checkers
syntax
(spell +aspell +everywhere)
#+end_src

** Tools
Set up a bunch of extra functionality in emacs
#+begin_src emacs-lisp
:tools
docker
lookup
lsp
(magit +forge)
tree-sitter
#+end_src

** Languages
:PROPERTIES:
:CUSTOM_ID: doom-lang
:END:

Enable lots of programming language integrations
#+begin_src emacs-lisp
:lang
(cc +lsp +tree-sitter)
emacs-lisp
data
(json +lsp +tree-sitter)
latex
markdown
(web +lsp +tree-sitter)
(org +hugo)
(python +tree-sitter)
(julia +lsp +tree-sitter)
(sh +fish +tree-sitter)
(yaml +lsp +tree-sitter)
(javascript +lsp +tree-sitter)
(go +lsp +tree-sitter)
graphql
(csharp +lsp +tree-sitter +dotnet)
#+end_src

** Config
Enable bindings and also tell Doom that I'm using a literate config
#+begin_src emacs-lisp
:config
(default +bindings +smartparens)
#+end_src
* Personalisation
Setup name and email
#+begin_src emacs-lisp
(setq user-full-name "Tim Quelch"
      user-mail-address "tim@tquelch.com")
#+end_src

Load my secrets (API keys, email configs etc.)
#+begin_src emacs-lisp
(defvar tq/secrets-loaded (load (concat doom-private-dir "my-secrets") t))
#+end_src

Setup org-crypt to use my key to encrypt-decrypt
#+begin_src emacs-lisp
(after! org-crypt
  (setq org-crypt-key "07CFA8E6B5CA3E4243916E42CAE8E8818C4B8B84"))
#+end_src

The following ensure that the ~PATH~ variable is maintained on remote connections. This is important for me because the unimelb HPC (and others) paths are define by ~module load~ in the ~.bash_profile~. This ensures that the explicitly loaded versions of git and other tools are used.
#+begin_src emacs-lisp
(after! tramp
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

* UI
Use some nice fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka" :size 18)
      doom-variable-pitch-font (font-spec :family "DejaVu Sans"))
#+end_src

Set the theme
#+begin_src emacs-lisp
(setq doom-one-brighter-comments t
      doom-one-comment-bg nil
      doom-theme 'doom-one)
#+end_src

Display line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

Set up ~fill-column~ to be wider by default
#+begin_src emacs-lisp
(setq-default fill-column 100)
#+end_src

Increase the amount of context lines when scrolling full screen-fulls (default is 2)
#+begin_src emacs-lisp
(setq next-screen-context-lines 8)
#+end_src

Ensure ~dired-omit-mode~ is not started with dired. It hides some files transparently and has caused lots of confusion on my part.
#+begin_src emacs-lisp
(after! dired
  (remove-hook 'dired-mode-hook 'dired-omit-mode))
#+end_src

Set the dictionary to use ~en_AU~
#+begin_src emacs-lisp
(after! ispell
  (setq ispell-dictionary "en_AU"))
#+end_src

By default bookmarked lines are highlighted in an annoying orange background which often removes other formatting. This disables that.
#+begin_src emacs-lisp
(after! bookmark
  (setq bookmark-fontify nil))
#+end_src

Disable doom snippets (I use snippets for LSP completion snippets, not weird opinionated pregenerated ones)
#+begin_src emacs-lisp :tangle packages.el
(package! doom-snippets :ignore t)
#+end_src

* Company
Reduce prefix length and delay. I want completion /fast/. THis may cause performance issues
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.2
        company-minimum-prefix-length 1))
#+end_src

Setup the default backends. By default doom includes ~company-dabbrev~ which adds too much noise. Yasnippet backend is also annoying and not included
#+begin_src emacs-lisp
(set-company-backend! '(text-mode prog-mode conf-mode) 'company-capf)
#+end_src

Don't use lsp-snippets. This is causing incorrect formatting on completion. I also don't really use it. See https://github.com/doomemacs/doomemacs/issues/6949 for details. Also increase the file watch threshold from 1000 to 1500. I have some repos that have a very large amount of files :(
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-enable-snippet nil
        lsp-file-watch-threshold 1500))
#+end_src


* Copilot

#+begin_src emacs-lisp :tangle packages.el
(package! copilot
  :recipe (:host github :repo "zerolfx/copilot.el" :files ("*.el" "dist")))
#+end_src

#+begin_src emacs-lisp
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :config
  (map! :leader :desc "Copilot" "t p"  #'copilot-mode)
  (map! :map copilot-completion-map
        [C-tab] #'copilot-accept-completion
        [C-M-tab] #'copilot-accept-completion-by-word))
#+end_src

* Editing
Enable the use of =C-u= as the universal argument again
#+begin_src emacs-lisp
(after! evil
  (setq! evil-want-C-u-delete nil
         evil-want-C-u-scroll nil))
#+end_src

Instead map =C-s= to scroll up.
#+begin_src emacs-lisp
(global-unset-key (kbd "C-s"))
(map! :m "C-s" #'evil-scroll-up)
#+end_src

Unbind evil jumping keys. I don't use these and I've found that they interfere with other uses of TAB (for example, in notmuch modes)
#+begin_src emacs-lisp
(map! :m [tab] nil
      :m [C-i] nil)
#+end_src

Enable easy use of ~avy~
#+begin_src emacs-lisp
(map! "C-'" #'avy-goto-char-timer
      "C-\"" #'avy-goto-line)
#+end_src

Reduce avy timeout from 0.5. I find myself getting impatient waiting for an entire half second
#+begin_src emacs-lisp
(after! avy
  (setq avy-timeout-seconds 0.3))
#+end_src

Use better ~comment-diwm~
#+begin_src emacs-lisp :tangle packages.el
(package! comment-dwim-2 :pin "7cdafd6d98234a7402865b8abdae54a2f2551c94")
#+end_src
#+begin_src emacs-lisp
(use-package! comment-dwim-2
  :bind ([remap comment-dwim] . comment-dwim-2)
  :config (setq cd2/region-command 'cd2/comment-or-uncomment-region))
#+end_src

Disable some extra packages that I don't really use
#+begin_src emacs-lisp :tangle packages.el
(disable-packages! evil-snipe evil-lion)
#+end_src

* Org and friends

** Base
#+begin_src emacs-lisp
(setq org-directory "~/documents/org/")
#+end_src

Set the org-agenda files to be the org directory. This includes all the files in the base directory, but no sub-directories.
#+begin_src emacs-lisp
(defvar org-agenda-files nil)
(add-to-list 'org-agenda-files org-directory)
#+end_src

#+begin_src emacs-lisp
(after! org
  <<org-configuration>>
  )
#+end_src

Setting up ~TODO~ states. I'm trying not to use the ~EMAIL~ state, but keeping it here for archive purposes.
#+begin_src emacs-lisp  :tangle no :noweb-ref org-configuration
(setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "ONHOLD(h)" "|" "DONE(d)")
                          (sequence "EMAIL(e)" "|" "SENT(s)")
                          (sequence "|" "CANCELLED(c)")
                          (sequence "|" "MOVED(m)")))
#+end_src

Ensure that sub-tasks must be completed before the parent task can be marked done
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(setq org-enforce-todo-dependencies t)
#+end_src

Log the time when tasks are completed
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(setq org-log-done 'time)
#+end_src

Use the outline path as the refile target. This can be completed in steps to work well with helm etc.
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(setq org-refile-use-outline-path t)
(setq org-outline-path-complete-in-steps nil)
#+end_src

Don't log when changing state with shift-arrows
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

Log state changes into drawers rather than under the items itself. This is also important for habits
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(setq org-log-into-drawer t)
#+end_src

Pressing return over links will follow the link
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(setq org-return-follows-link t)
#+end_src

Archive to subdirectory and use datetree
#+begin_src emacs-lisp
(after! org-archive
  (setq org-archive-location "archive/%s_archive::datetree/"))
#+end_src

Highlight \LaTeX within ~org~
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(setq org-highlight-latex-and-related '(native script entities))
#+end_src

No longer start with latex or inline images. This is often quite slow.
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(setq org-startup-with-latex-preview nil
      org-startup-with-inline-images nil)
#+end_src

Enable the use of org-ids for links to headlines. ~org-id-track-globally~ is on by default in doom, however this only updates the org id file when emacs exits, so I'm not sure if it will work very well for me using a daemoned emacs.
#+begin_src emacs-lisp
(use-package! org-id
  :after org
  :config
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
#+end_src

Remove empty clock lines, they achieve nothing.
#+begin_src emacs-lisp
(after! org-clock
  (setq org-clock-out-remove-zero-time-clocks t))
#+end_src

Turn on auto-revert mode in org mode files so that they automatically update when changed (e.g. by syncthing, dropbox etc.). Doom does not do this automatically, instead only auto-reverting the current buffers, which is fine for most cases except background buffers used for agendas and capture.
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(add-hook 'org-mode-hook 'auto-revert-mode)
#+end_src

Only use ~company-capf~ for org mode. Again: I hate ~dabbrev~
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(set-company-backend! 'org-mode 'company-capf)
#+end_src

Unmap keybind that I use for avy
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(map! :map org-mode-map "C-'" nil)
#+end_src

Editing around links is a real pain. Often you are typing thinking you are outsid ethe link but it ends up adding to the description. Below are some simple functions to quickly exit the link
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(defun tq/org-exit-link-forward ()
  "Jump just outside a link forward"
  (interactive)
  (when (org-in-regexp org-link-any-re)
    (goto-char (match-end 0))
    (insert " ")))

(defun tq/org-exit-link-backward ()
  "Jump just outside a link backward"
  (interactive)
  (when (org-in-regexp org-link-any-re)
    (goto-char (match-beginning 0))
    (save-excursion (insert " "))))

(map! :map (evil-org-mode-map org-mode-map)
      :ni "C-k" #'tq/org-exit-link-forward
      :ni "C-j" #'tq/org-exit-link-backward)
#+end_src

Add simple keybinding to toggle latex fragments in org mode
#+begin_src emacs-lisp :tangle no :noweb-ref org-configuration
(map! :map evil-org-mode-map
      :n "zf" #'org-toggle-latex-fragment)
#+end_src

Disable some of the extra things that Doom enables
#+begin_src emacs-lisp :tangle packages.el
(disable-packages! org-superstar)
#+end_src

** Exporting
#+begin_src emacs-lisp
(use-package ox-extra
  :after org
  :config
  (ox-extras-activate '(ignore-headlines)))
#+end_src

#+begin_src emacs-lisp
(use-package ox-latex
  :after org
  :config
  (add-to-list 'org-latex-classes '("a4article"
                                    "\\documentclass[11pt,a4paper]{article}"
                                    ("\\section{%s}" . "\\section*{%s}")
                                    ("\\subsection{%s}" . "\\subsection*{%s}")
                                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (setq org-latex-default-class "a4article")
  (setq org-latex-packages-alist '(("titletoc, title" "appendix" nil) ; Setup appendices
                                   ("margin=25mm" "geometry")         ; Setup margins
                                   ("" "tocbibind" nil)  ; Put bibliography in TOC
                                   ("" "pdflscape" nil)  ; Allow landscape pages
                                   ("" "pdfpages" nil)   ; Allow inclusion of pdfs
                                   ("" "svg" nil)        ; Allow SVG images (req. inkscape?)
                                   ("" "subcaption" nil) ; Allow subcaptions
                                   ("" "listings" nil)   ; Source code listings
                                   ("" "color" nil)      ; Color in source code listings
                                   ("binary-units" "siunitx" t)))     ; SI units

  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

  (setq org-latex-listings t)                                         ; Turn on source code inclusion
  (setq org-latex-listings-options '(("basicstyle" "\\linespread{0.85}\\ttfamily")
                                     ("numbers" "left")
                                     ("numberstyle" "\\tiny")
                                     ("frame" "tb")
                                     ("tabsize" "4")
                                     ("columns" "fixed")
                                     ("showstringspaces" "false")
                                     ("showtabs" "false")
                                     ("keepspaces" "true")
                                     ("commentstyle" "\\color{red}")
                                     ("keywordstyle" "\\color{blue}")
                                     ("breaklines" "true"))))
#+end_src

Ensure that attachment links are properly expanded before export
#+begin_src emacs-lisp
(after! org-attach
  (add-hook 'org-export-before-parsing-hook #'org-attach-expand-links))
#+end_src

Disable 'smart' quote export. This should remove apostrophes and quotes turning into things like ~can&rsquo;t~
#+begin_src emacs-lisp
(after! ox (setq org-export-with-smart-quotes nil))
#+end_src

** Notetaking

*** Roam

Setup ~org-roam~, ~org-roam-bibtex~, and ~org-roam-ui~ to track source
#+begin_src emacs-lisp :tangle packages.el
(package! org-roam
  :recipe (:host github :repo "org-roam/org-roam")
  :pin "5c06471c3a11348342719fd9011486455adeb701")
(package! org-roam-bibtex
  :recipe (:host github :repo "org-roam/org-roam-bibtex")
  :pin "efdac6fe4134c33f50b06a0a6d192003d0e5094c")
(package! org-roam-ui
  :recipe (:host github :repo "org-roam/org-roam-ui" :files ("*.el" "out"))
  :pin "5ac74960231db0bf7783c2ba7a19a60f582e91ab")
#+end_src

I want to roll my own ~org-roam~ config rather than use doom's module.
#+begin_src emacs-lisp
(use-package! org-roam
  :commands (org-roam-node-find
             org-roam-node-insert
             org-roam-show-graph
             org-roam-buffer-toggle
             org-roam-dailies-goto-date
             org-roam-dailies-goto-today
             org-roam-dailies-goto-tomorrow
             org-roam-dailies-goto-yesterday)
  :init
  <<org-roam-init>>
  :config
  <<org-roam-config>>
  )
#+end_src

Acknowledge that I have upgraded to v2 to squash warning
#+begin_src emacs-lisp
(setq org-roam-v2-ack t)
#+end_src

Set up useful keybindings to use and access ~org-roam~
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-init
(map! :after org
      :leader
      :prefix "n"
      "f" #'org-roam-node-find
      "i" #'org-roam-node-insert
      "g" #'org-roam-show-graph
      "r" #'org-roam-buffer-toggle
      "n" #'org-roam-dailies-capture-today
      "t" #'org-roam-dailies-goto-today
      "d" nil
      (:prefix ("d" . "by date")
         :desc "Goto previous note" "b" #'org-roam-dailies-goto-previous-note
         :desc "Goto date"          "d" #'org-roam-dailies-goto-date
         :desc "Goto next note"     "f" #'org-roam-dailies-goto-next-note
         :desc "Goto tomorrow"      "m" #'org-roam-dailies-goto-tomorrow
         :desc "Capture today"      "n" #'org-roam-dailies-capture-today
         :desc "Goto today"         "t" #'org-roam-dailies-goto-today
         :desc "Capture Date"       "v" #'org-roam-dailies-capture-date
         :desc "Goto yesterday"     "y" #'org-roam-dailies-goto-yesterday
         :desc "Goto directory"     "." #'org-roam-dailies-find-directory)
      "m" nil
      (:prefix ("m" . "metadata")
       "t" #'org-roam-tag-add
       "T" #'org-roam-tag-delete
       "a" #'org-roam-alias-add
       "A" #'org-roam-alias-delete))
#+end_src

Set directory for my ~org-roam~ notes
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-init
(setq org-roam-directory (concat (file-name-as-directory org-directory) "notes/"))
#+end_src

Put the database in the doom cache directory, rather than stored with the notes
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-init
(setq org-roam-db-location (concat doom-cache-dir "org-roam.db"))
#+end_src

Setup ~org-roam~
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
(org-roam-setup)
#+end_src

Set up org roam buffer sections
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
(setq org-roam-mode-sections (list #'org-roam-backlinks-insert-section
                                   #'org-roam-reflinks-insert-section
                                   #'org-roam-unlinked-references-insert-section))
#+end_src

Set up roam buffer to be a side window
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-init
(add-to-list 'display-buffer-alist
             '(("\\*org-roam\\*"
                (display-buffer-in-direction)
                (direction . right)
                (window-width . 0.33)
                (window-height . fit-window-to-buffer))))
#+end_src

Turn off verbosity. I don't like the messages
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
(setq org-roam-verbose nil)
#+end_src

Set up capture template. It includes a TODO item to write about the note. I have it set to finish immediately, as I don't really like editing them instantly.
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
(setq org-roam-capture-templates
      `(("d" "default" plain "%?"
         :if-new
         (file+head
          "${slug}.org"
          "#+title: ${title}\n\n")
         :unnarrowed t
         :immediate-finish t)))
#+end_src

Ensure tags come from both the directory and the ~roam_tag~ file property. The default is just the property
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
(setq org-roam-tag-sources '(prop all-directories))
#+end_src

Exclude daily notes from the graph
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
(setq org-roam-graph-exclude-matcher '("daily/"))
#+end_src

Update the database immediately on file changes. The alternative is to do it on an idle timer, but I've found that to be buggy and I haven't noticed the immediate updates to be very noticeable.
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
(setq org-roam-db-update-method 'immediate)
#+end_src

Set up an agenda view for nearby notes
#+begin_src emacs-lisp
(defun tq/org-agenda-nearby-notes (&optional distance)
  (interactive "P")
  (let ((org-agenda-files (org-roam-db--links-with-max-distance
                           buffer-file-name (or distance 3)))
        (org-agenda-custom-commands '(("e" "" ((alltodo ""))))))
    (org-agenda nil "e")))

(map! :leader :prefix "n" :desc "Agenda nearby" "a" #'tq/org-agenda-nearby-notes)
#+end_src

Set up a graph view where citation links are excluded
#+begin_src emacs-lisp
(defun tq/org-roam-graph-without-cites (&optional arg)
  (interactive "P")
  (let ((org-roam-graph-exclude-matcher (cons "lit/" org-roam-graph-exclude-matcher)))
    (org-roam-graph-show arg)))

(map! :leader :prefix "n" "G" #'tq/org-roam-graph-without-cites)
#+end_src

Setup case-insensitive completion in ~org-roam~ files
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
(add-hook! 'org-roam-file-setup-hook
  (setq-local completion-ignore-case t))
#+end_src

+Also set up completion to trigger everywhere, not just on link start.+ Disable completion anywhere, it isn't working as I would like right now.
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
(setq org-roam-completion-everywhere nil)
#+end_src

Rename files when title is changed
#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-config
(add-hook! 'after-save-hook
           (defun org-rename-to-new-title ()
             (when-let*
                 ((old-file (buffer-file-name))
                  (is-roam-file (org-roam-file-p old-file))
                  (in-roam-base-directory? (string-equal
                                            (expand-file-name org-roam-directory)
                                            (file-name-directory old-file)))
                  (file-node (save-excursion
                               (goto-char 1)
                               (org-roam-node-at-point)))
                  (slug (org-roam-node-slug file-node))
                  (new-file (expand-file-name (concat slug ".org")))
                  (different-name? (not (string-equal old-file new-file))))
               (rename-buffer new-file)
               (rename-file old-file new-file)
               (set-visited-file-name new-file)
               (set-buffer-modified-p nil))))
#+end_src

Set the dailies directory to be a subdirectory in my base ~org-roam~ directory
#+begin_src emacs-lisp :tangle no :noweb-ref org-journal-configuration
(setq org-roam-dailies-directory "daily/")
#+end_src

Set the capture template for my daily notes
#+begin_src emacs-lisp :tangle no :noweb-ref org-journal-configuration
(setq org-roam-dailies-capture-templates
      '(("d" "default" entry "* %?"
         :if-new (file+head
                  "%<%Y-%m-%d>.org"
                  "#+title: %<%Y-%m-%d>\n")
         :unnarrowed t
         :immediate-finish t
         :jump-to-captured t)))
#+end_src

I often want to refile ~TODO~ items from journal or other org files into my inbox. This function copies the headline into my inbox, and creates bi-directional links on both headlines. It also marks the original headlines as the ~MOVED~ todo keyword.
#+begin_src emacs-lisp
(defun tq/refile-to-inbox ()
  (interactive)
  (let ((id (org-id-get-create)))
    (org-refile 3 nil (list org-default-notes-file org-default-notes-file nil nil))
    (org-edit-headline (concat "[[id:" id "][HERE]] " (nth 4 (org-heading-components))))
    (let ((new-id (org-id-get-create t)))
      (save-window-excursion
        (org-id-goto id)
        (org-set-property "ORIGIN" (concat "[[id:" new-id "]]")))))
  (let ((org-enforce-todo-dependencies nil))
   (org-map-entries (lambda () (org-todo "MOVED")) nil 'tree)))

(after! org
  (map! :map org-mode-map :localleader :prefix "r" "i" #'tq/refile-to-inbox))
#+end_src

Configure web ui
#+begin_src emacs-lisp
(use-package org-roam-ui
  :after org-roam
  :hook (after-init . org-roam-ui-mode))
#+end_src

* Languages
Some extra packages and languages that are not included by doom modules by default

** Systemd unit files
#+begin_src emacs-lisp :tangle packages.el
(package! systemd :pin "b6ae63a236605b1c5e1069f7d3afe06ae32a7bae")
#+end_src
#+begin_src emacs-lisp
(use-package systemd
  :defer t)
#+end_src

** Docker compose
#+begin_src emacs-lisp :tangle packages.el
(package! docker-compose-mode :pin "abaa4f3aeb5c62d7d16e186dd7d77f4e846e126a")
#+end_src
#+begin_src emacs-lisp
(use-package docker-compose-mode
  :defer t)
#+end_src

** Python
Set up LSP to turn off some python warnings
#+begin_src emacs-lisp
(after! python
  (setq! lsp-pylsp-plugins-pydocstyle-ignore t))
#+end_src

** Julia
Use ~vterm~ for backend for repl,
#+begin_src emacs-lisp
(after! julia-repl
  (julia-repl-set-terminal-backend 'vterm))
#+end_src

Ensure that global environments are used. This still doesn't activate the local environment but it should be good enough.
#+begin_src emacs-lisp
(setq lsp-julia-package-dir nil)
#+end_src

Add mapping in org mode to execute julia code. This is really specific and not the best solution, but I find it is far more useful than executing the julia code in the session provided by ~ob-julia~ or by running it in the non-session environment. Issues with this include:
- Replaces default org mapping (I don't use it though)
- Works on any code block, not just julia. I guess I could add a simple check to check if it is a julia block, but I haven't made this mistake yet
- ~C-c C-c~ still does the default behaviour. I need to actually remember that I have this new binding set up

#+begin_src emacs-lisp
(after! org
  (defun tq/send-block-to-julia-repl ()
      (interactive)
      (save-mark-and-excursion
        (org-babel-mark-block)
        (julia-repl-send-region-or-line)))
  (map! :map org-mode-map "C-c C-v C-c" #'tq/send-block-to-julia-repl))
#+end_src

Define a minor mode to enable sending to julia-repl
#+begin_src emacs-lisp
(define-minor-mode julia-repl-interaction-mode
  "Toggle keybinds to send lines to the julia-repl"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "C-s") #'julia-repl-send-region-or-line)
            map))
#+end_src

** MATLAB/Octave

#+begin_src emacs-lisp
(use-package octave-mode
  :mode "\\.m\\'")
#+end_src

** Go
#+begin_src emacs-lisp :tangle packages.el
(package! go-eldoc :disable t)
#+end_src

** Web

#+begin_src emacs-lisp
(after! web-mode
  (setq web-mode-comment-formats '(("java"       . "/*")
                                   ("javascript" . "//")
                                   ("typescript" . "//")
                                   ("jsx"        . "//")
                                   ("tsx"        . "//")
                                   ("php"        . "/*")
                                   ("css"        . "/*"))))
#+end_src

#+begin_src emacs-lisp
(after! typescript-mode
  (setq-hook! 'typescript-mode-hook +format-with-lsp nil))
(after! web-mode
  (setq-hook! 'typescript-tsx-mode-hook +format-with-lsp nil))
#+end_src

* Temporary

Disable code-review, it seems to be broken

#+begin_src emacs-lisp :tangle packages.el
(package! code-review :disable t)
#+end_src
